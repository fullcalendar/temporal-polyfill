
#########################
# Limits :: ZonedDateTime
#########################

# Wrangle temporary `checkIsoDateInBoundsStrict`


##########################
# Limits :: PlainMonthYear
##########################

# Wrangle `smallestPrecision` HACK
# Wrangle `parsePlainDate`/`isPlainYearMonth` HACK
# Wrangle `diffPlainYearMonth` HACK


######################
# Field Parsing :: All
######################

# Wrangle `builtinRefiners`.offset HACK


################################
# Field Parsing :: ZonedDateTime
################################

# Wrangle `builtinRefiners`.offset HACK


################################
# Field Parsing :: PlainMonthDay
################################

# Wrangle `parsePlainDate`/`isPlainMonthDay` HACK


##########
# Calendar
##########

# Wrangle `maxLengthOfMonthCodeInAnyYear` HACK
# Wrangle `chineseMonthDaySearchStartYear` HACK

# Switch `era` to:
# gregory/gregory-inverse
# japenese/japanese-inverse
# roc/roc-inverse
# etc
# Search for helperEthioaa in calendar.mjs in reference implementation
# FYI, canonicalization already happening on internal Intl.DateTimeFormat results
intl402/Temporal/ZonedDateTime/from/canonicalize-era-codes.js
staging/Intl402/Temporal/old/japanese-before-era.js
staging/sm/Temporal/PlainDate/non-positive-era-year.js


#########################
# Locale-Aware Formatting
#########################

# ZonedDateTime::toLocaleString({ "timeZoneName": "short" }) should contain time parts
# Be more like Date::toLocaleString instead of DTF::format():
#
#   let legacyDate = new Date(1735213600_321)
#   let options = { timeZone: 'UTC', timeZoneName: 'short' }
#   console.log(legacyDate.toLocaleString('en', options))                  // 12/26/2024, 11:46:40 AM UTC
#   console.log(new Intl.DateTimeFormat('en', options).format(legacyDate)) // 12/26/2024, UTC
#
# Should massage DTF options more
intl402/Temporal/ZonedDateTime/prototype/toLocaleString/lone-options-accepted.js

# DTF::format() should throw error
# when given a Temporal type that has no overlap with formatting options.
# Search `if (!hasAnyPropsByName(options, standardNames))`
# If within DateTimeFormat().format(), error
# If within Temporal::[TYPE]::toLocaleString(), apply fallbacks
intl402/DateTimeFormat/prototype/format/temporal-objects-not-overlapping-options.js
intl402/DateTimeFormat/prototype/formatToParts/temporal-objects-not-overlapping-options.js
intl402/DateTimeFormat/prototype/formatRange/temporal-objects-not-overlapping-options.js
intl402/DateTimeFormat/prototype/formatRangeToParts/temporal-objects-not-overlapping-options.js


################
# NOT ACTIONABLE
################

# WONTFIX: Seems our Node version doesn't normalize
# America/Nipigon -> America/Toronto, but the browsers do
staging/sm/Temporal/ZonedDateTime/zones-and-links.js

# WONTFIX: Precision issue with Duration::total
built-ins/Temporal/Duration/prototype/total/precision-exact-mathematical-values-6.js

# WONTFIX
# Our polyfill does not support the lowest year of i18n calendars because:
#
# A) To determine a YMD values, we must use Intl.DateTimeFormat scraping to
#    crawl backwards through years. If YMD is within-bounds, but start-of-year
#    is not, our algorithm chokes
#
# Failing code:
#   new Temporal.PlainDate(-271821, 4, 21, 'buddhist').month
#   // well within epochMilli bounds, but fails
#
# B) -271821-04-19 is a valid PlainDate but it's out-of-range when computing UTC
#    epochMilli for Intl.DateTimeFormat. Possible to use a negative offset time
#    zone like America/Chicago, but this special-case is cumbersome.
#
staging/sm/Temporal/PlainDate/withCalendar.js

# Intl.DateTimeFormat does not canonicalize time zone yet
intl402/DateTimeFormat/timezone-not-canonicalized.js
intl402/DateTimeFormat/timezone-case-insensitive.js

# Intl.DateTimeFormat does accept tz offset time zones yet
intl402/DateTimeFormat/prototype/format/offset-timezone-gmt-same.js
intl402/DateTimeFormat/prototype/formatToParts/offset-timezone-correct.js
intl402/DateTimeFormat/prototype/resolvedOptions/offset-timezone-basic.js
intl402/DateTimeFormat/prototype/resolvedOptions/offset-timezone-change.js

# Intl.DateTimeFormat doesn't output what we expect,
# which is checked in test262 before comparing to Temporal formatting
# An issue with Intl.DateTimeFormat
staging/Intl402/Temporal/old/non-iso-calendars.js

# No Intl.DurationFormat yet
intl402/DurationFormat/prototype/formatToParts/temporal-duration-string-arg.js
intl402/DurationFormat/prototype/formatToParts/temporal-duration-object-arg.js
intl402/DurationFormat/prototype/formatToParts/taint-temporal-duration-prototype.js
intl402/DurationFormat/prototype/format/temporal-duration-string-arg.js
intl402/DurationFormat/prototype/format/temporal-duration-object-arg.js
intl402/DurationFormat/prototype/format/taint-temporal-duration-prototype.js
intl402/Temporal/Duration/prototype/toLocaleString/returns-same-results-as-DurationFormat.js

# Ignored in proposal-temporal repo:
# https://github.com/tc39/proposal-temporal/blob/main/polyfill/test/expected-failures.txt#L33
# "Test is incorrect, no reason why this date should not exist; seems to be
# working around an ICU4X bug"
staging/sm/Temporal/PlainDate/from-islamic-umalqura.js

# Ignored in proposal-temporal repo:
# https://github.com/tc39/proposal-temporal/blob/main/polyfill/test/expected-failures.txt#L39
# "Faulty leap month calculations in Chinese calendar in ICU4C
# https://unicode-org.atlassian.net/browse/ICU-22230"
staging/sm/Temporal/PlainMonthDay/from-chinese-leap-month-uncommon.js

# Ignored in proposal-temporal repo:
# https://github.com/tc39/proposal-temporal/blob/main/polyfill/test/expected-failures.txt#L31
# "Possibly faulty calculations for year 0 in Hebrew calendar in ICU4C
# https://unicode-org.atlassian.net/browse/ICU-23007"
staging/sm/Temporal/PlainDate/from-constrain-hebrew.js
