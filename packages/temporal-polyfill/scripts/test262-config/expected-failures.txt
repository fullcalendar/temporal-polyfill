
# Function descriptor names are wrong
# Fixed by:
# Object.defineProperties(method, createPropDescriptors({ name: '' }, /* readyonly = */ true))
intl402/DateTimeFormat/prototype/format/name.js
intl402/DateTimeFormat/prototype/format/format-function-name.js
intl402/DateTimeFormat/prototype/formatRange/name.js
intl402/DateTimeFormat/prototype/formatRangeToParts/name.js
intl402/DateTimeFormat/prototype/formatToParts/name.js
intl402/DateTimeFormat/prototype/resolvedOptions/name.js

# Caused by fixResolvedOptionsCalendar
intl402/DateTimeFormat/constructor-calendar-numberingSystem-order.js

# We can't do `copiedOptions = pluckProps` the way we want
intl402/DateTimeFormat/taint-Object-prototype.js

# We're affected by Object.prototype pollution
intl402/DateTimeFormat/default-options-object-prototype.js

# Misc Intl.DateTimeFormat issues to triage
intl402/DateTimeFormat/offset-timezone-no-unicode-minus-sign.js
intl402/DateTimeFormat/prototype/format/timedatestyle-en.js
intl402/DateTimeFormat/prototype/resolvedOptions/hourCycle-default.js


##
## Spec deviations specific to our polyfill
##

# WONTFIX
# The spec calls for higher floating-point division precision than what JS's
# 64-bit floats provide. proposal-temporal/polyfill achieves this via string
# manipulation hacks:
# https://github.com/tc39/proposal-temporal/blob/999937370cfd0f6d2ce3cc83a01ab82ab3771b46/polyfill/lib/timeduration.mjs#L92
# Our polyfill avoids the associated performance degradation and filesize
# increase by doing simple native JS number division, but this sometimes results
# in less precise results. Example:
#
#   OURS: 816.5692187493501
#   SPEC: 816.56921874935
#
built-ins/Temporal/Duration/prototype/total/precision-exact-mathematical-values-6.js

# WONTFIX
# Our polyfill does not support the lowest year of some i18n calendars because:
#
# A) To determine a YMD values, we must use Intl.DateTimeFormat scraping to
#    crawl backwards through years. If YMD is within-bounds, but start-of-year
#    is not, our algorithm chokes
#
# Failing code:
#   new Temporal.PlainDate(-271821, 4, 21, 'buddhist').month
#   // 2 days within epochMilli lower bound, but still fails
#
# B) -271821-04-19 is a valid PlainDate but it's out-of-range when computing UTC
#    epochMilli for Intl.DateTimeFormat. Possible to use a negative offset time
#    zone like America/Chicago, but this special-case is cumbersome.
#
staging/sm/Temporal/PlainDate/withCalendar.js

# WONTFIX
# TimeZone ID canonicalization for Intl.DateTimeFormat
# Polyfilling this is hard for format/formatToParts. The reference-polyfill doesn't even do it.
# The reference-polyfill DOES polyfill resolveOptions (used by tests below), but that will result
# in inconsistent results with format/formatToParts, so best not to polyfill either.
intl402/DateTimeFormat/timezone-case-insensitive.js
intl402/DateTimeFormat/timezone-not-canonicalized.js


##
## Already ignored in proposal-temporal/polyfill
## https://github.com/tc39/proposal-temporal/blob/main/polyfill/test/expected-failures.txt
##

# Test is incorrect, no reason why this date should not exist; seems to be
# working around an ICU4X bug
staging/sm/Temporal/PlainDate/from-islamic-umalqura.js

# Faulty leap month calculations in Chinese calendar in ICU4C
# https://unicode-org.atlassian.net/browse/ICU-22230
staging/sm/Temporal/PlainMonthDay/from-chinese-leap-month-uncommon.js

# Possibly faulty calculations for year 0 in Hebrew calendar in ICU4C
# https://unicode-org.atlassian.net/browse/ICU-23007
staging/sm/Temporal/PlainDate/from-constrain-hebrew.js

# Caused by https://issues.chromium.org/issues/40893567
# Remove these lines after that bug is fixed
staging/Intl402/Temporal/old/date-time-format.js
staging/Intl402/Temporal/old/datetime-toLocaleString.js

# Fails until Intl.DurationFormat available in Node.js release
intl402/Temporal/Duration/prototype/toLocaleString/returns-same-results-as-DurationFormat.js

# Temporal test262 runner does not support $262.createRealm()
intl402/DateTimeFormat/proto-from-ctor-realm.js

# Fails until CLDR 46 (released 2024-10-24) makes its way into a Node.js release
staging/Intl402/Temporal/old/non-iso-calendars.js


##
## Not ignored, but FAILS in proposal-temporal/polyfill
##

# Seems our Node version doesn't normalize
# America/Nipigon -> America/Toronto, but the browsers do
staging/sm/Temporal/ZonedDateTime/zones-and-links.js
