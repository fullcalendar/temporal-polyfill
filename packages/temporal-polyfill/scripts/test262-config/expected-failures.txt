##
## In addition to the ignored tests below, see other files:
##
##   - expected-failures-node-*.txt
##     Shortcomings with native APIs, unrelated to our polyfill
##
##   - expected-failures-descriptor.txt
##     We construct our Temporal classes programmatically, not with ES6 `class`.
##     Thus, our property descriptors are not 100% compliant with the spec.
##
##   - expected-failures-builtin-calls.txt
##     Our polyfill calls methods like Array::push directly on objects,
##     which could be vulnerable to prototype pollution.
##     We are weighing cost/benefit of always calling static method references.
##


##
## Spec deviations (4 total)
##

# WONTFIX (1)
# The spec calls for higher floating-point division precision than what JS's
# 64-bit floats provide. proposal-temporal/polyfill achieves this via string
# manipulation hacks:
# https://github.com/tc39/proposal-temporal/blob/999937370cfd0f6d2ce3cc83a01ab82ab3771b46/polyfill/lib/timeduration.mjs#L92
#
# Our polyfill avoids the associated performance degradation and filesize
# increase by doing simple native JS number division, but this sometimes results
# in less precise results. Example:
#
#   OURS: 816.5692187493501
#   SPEC: 816.56921874935
#
built-ins/Temporal/Duration/prototype/total/precision-exact-mathematical-values-6.js

# WONTFIX (2)
# Our polyfill does not support the lowest year of some i18n calendars because:
#
# A) To determine a YMD values, we must use Intl.DateTimeFormat scraping to
#    crawl backwards through years. If YMD is within-bounds, but start-of-year
#    is not, our algorithm chokes.
#
# Failing code:
#   new Temporal.PlainDate(-271821, 4, 21, 'buddhist').month
#   // 2 days within epoch-milliseconds lower bound, but still fails
#
# B) -271821-04-19 is a valid PlainDate but it's out-of-range when computing UTC
#    epoch-milliseconds for Intl.DateTimeFormat. Possible to use a negative
#    offset time zone like America/Chicago, but this special-case is cumbersome.
#
staging/sm/Temporal/PlainDate/withCalendar.js

# WONTFIX (3)
# We do not patch Intl.DateTimeFormat's constructor to more strictly validate
# timeZone strings
#
# A) Rejecting legacy ICU time zones: see expected-failures-node-gte16.txt
# B) Rejecting invalid minus sign:    see expected-failures-node-gte22.txt

# WONTFIX (4)
# We do not patch Intl.DateTimeFormat's resolvedOptions method to return
# the string-normalized version of the original given time zone ID:
#
#   new Intl.DateTimeFormat("en", { timeZone: "America/Argentina/Buenos_Aires" })
#     .resolvedOptions().timeZone
#     // Current Node/browser behavior: "America/Buenos_Aires"
#     // Desired spec behavior:         "America/Argentina/Buenos_Aires"
#
intl402/DateTimeFormat/timezone-not-canonicalized.js
#
# Therefor, similar tests for normalizing differently-cased strings fail too:
#
#   new Intl.DateTimeFormat("en", { timeZone: "AMERICA/ARGENTINA/BUENOS_AIRES" })
#     .resolvedOptions().timeZone
#     // Current Node/browser behavior: "America/Buenos_Aires"
#     // Desired spec behavior:         "America/Argentina/Buenos_Aires"
#
intl402/DateTimeFormat/timezone-case-insensitive.js


##
## Issues with environment, already ignored in proposal-temporal/polyfill
## https://github.com/tc39/proposal-temporal/blob/main/polyfill/test/expected-failures.txt
##

# ENV-ISSUE
# Test is incorrect, no reason why this date should not exist; seems to be
# working around an ICU4X bug
staging/sm/Temporal/PlainDate/from-islamic-umalqura.js

# ENV-ISSUE
# Faulty leap month calculations in Chinese calendar in ICU4C
# https://unicode-org.atlassian.net/browse/ICU-22230
staging/sm/Temporal/PlainMonthDay/from-chinese-leap-month-uncommon.js

# ENV-ISSUE
# Possibly faulty calculations for year 0 in Hebrew calendar in ICU4C
# https://unicode-org.atlassian.net/browse/ICU-23007
staging/sm/Temporal/PlainDate/from-constrain-hebrew.js

# ENV-ISSUE
# Caused by https://issues.chromium.org/issues/40893567
# Remove these lines after that bug is fixed
staging/Intl402/Temporal/old/date-time-format.js
staging/Intl402/Temporal/old/datetime-toLocaleString.js

# ENV-ISSUE
# Fails until Intl.DurationFormat available in Node.js release
intl402/Temporal/Duration/prototype/toLocaleString/returns-same-results-as-DurationFormat.js

# ENV-ISSUE
# Temporal test262 runner does not support $262.createRealm()
intl402/DateTimeFormat/proto-from-ctor-realm.js

# ENV-ISSUE
# https://github.com/tc39/ecma402/issues/402
intl402/DateTimeFormat/prototype/resolvedOptions/hourCycle-default.js

# ENV-ISSUE
# Fails until CLDR 46 (released 2024-10-24) makes its way into a Node.js release
staging/Intl402/Temporal/old/non-iso-calendars.js


##
## Not ignored, but FAILS in proposal-temporal/polyfill
##

# ENV-ISSUE
# ZonedDateTime equality compares *resolved* time zone IDs, but our environment
# resolves time zone links differently than what the tests expect:
#
#   let zdtLink = new Temporal.ZonedDateTime(0n, "Antarctica/South_Pole");
#   let zdtZone = new Temporal.ZonedDateTime(0n, "Antarctica/McMurdo");
#   zdtLink.timeZone // "Antarctica/South_Pole", resolves to "Pacific/Auckland"
#   zdtZone.timeZone // "Antarctica/McMurdo", resolves to "Antarctica/McMurdo"
#   zdtLink.equals(zdtZone)
#   // EXPECTED: true
#   // ACTUAL: false
#
staging/sm/Temporal/ZonedDateTime/zones-and-links.js
